'use strict';

const { describe, expect, test } = require('@jest/globals');
const { doctypedecl_uv, Name, S, ExternalID, QName, SystemLiteral } = require('../../lib/grammar');
const fs = require('fs');
var REGEXP_DUMP = `'use strict';
// THIS FILE IS GENERATED by tests, don't change it manually
${Object.entries({
	S,
	Name,
	QName,
	SystemLiteral,
	ExternalID,
	doctypedecl_uv,
})
	.map(([name, reg]) => `const ${name} = /${reg.source}/;`)
	.join('\n')}`;
describe('all relevant regular expressions written out to a file', () => {
	test('should be updated when running tests', () => {
		var fileName = __dirname + '/regexp.js';
		// delete the file and rerun the test(s) to update to current value, in case you touched grammar.js
		if (!fs.existsSync(fileName)) {
			fs.writeFileSync(fileName, REGEXP_DUMP);
		}
		expect(fs.readFileSync(fileName, 'utf-8')).toBe(REGEXP_DUMP);
	});
})
describe('doctypedecl_uv', () => {
	test('should match parts', () => {
		expect(Name.test('name')).toBe(true);
		expect(SystemLiteral.test('""')).toBe(true);
		expect(SystemLiteral.test("''")).toBe(true);
		expect(ExternalID.test(`PUBLIC '' ''`)).toBe(true);
		expect(ExternalID.test(`SYSTEM ''`)).toBe(true);
		expect(ExternalID.test(`SYSTEM ""`)).toBe(true);
		expect(ExternalID.test(`SYSTEM "hello.dtd"`)).toBe(true);
	});
	[
		`<!DOCTYPE name PUBLIC "identifier"  "url" [
		<?foo "foo"?>
		<!ENTITY bar "bar">
		<!ENTITY bar "bar2"> <!--  -->
		<!ENTITY % baz "baz"> %test;
		]>`,
		`<!DOCTYPE name>`,
		`<!DOCTYPE name SYSTEM "identifier" [
		  <!ENTITY foo "foo">
		  <!ENTITY bar "bar">
		  <!ENTITY bar "bar2"> <!--  -->
		  <!ENTITY % baz "baz"> %test;
		]>`,
		`<!DOCTYPE name [
		 <!ELEMENT br EMPTY>
		 <!ELEMENT p (#PCDATA|emph)* >
		 <!ELEMENT container ANY>
		 ]>`,
		/*
		TODO: This example comes from the documentation,
		      but elementdecl only allows `Name` after the first whitespace which doesn't allow % or ;.
		      Does this mean we need to do entity replacement in elements?
		 <!ELEMENT %name.para; %content.para; >
		*/
		`<!DOCTYPE HTML >`,
		`<!DOCTYPE greeting SYSTEM "hello.dtd">`,
		`<!DOCTYPE name PUBLIC '' ''>`,
		`<!DOCTYPE name SYSTEM 'test' []  >`,
		`<!DOCTYPE name PUBLIC 'test' 'test2'>`,
		`<!DOCTYPE name PUBLIC 'test' "tes't2">`,
	].forEach((source, index) =>
		//? source
		test(`should match valid doctype at index ${index}`, () => {
			expect(doctypedecl_uv.test(source)).toBe(true);
		})
	);
	[
		`<!DOCTYPE x PUBLIC '"'>`,
		`<!DOCTYPE SYSTEM "bla">`,
		`<!DOCTYPE name [%;]>`,
		`<!DOCTYPE name SYSTEM 'test' 'test2'>`,
		`<!DOCTYPE name PUBLIC 'te'st' 'test2'>`,
		`<!DOCTYPE name PUBLIC 'test' 'tes't2'>`,
		`<!DOCTYPE name PUBLIC 'test' "tes"t2">`,
	].forEach((source, index) =>
		//? source
		test(`should not match invalid doctype at index ${index}`, () => {
			expect(doctypedecl_uv.test(source)).toBe(false);
		})
	);
});
